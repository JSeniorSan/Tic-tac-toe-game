import { useState } from "react";
import Sort from "./Sort";
//–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è
function SwitchSort(props) {
  const [isClicked, setIsClicked] = useState(false);
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏
  function whatToDo(index) {
    if (index === 0) {
      props.setter(0);
    } else {
      props.setter(index);
      setIsClicked(true);
    }
  }
  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
  const moves = props.history.map((square, index) => {
    let description;
    // –£—Å–ª–æ–≤–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
    if (index > 0) {
      description = `‚öìLet's move to #` + index;
    } else {
      description = `New Gameü™É`;
    }
    return (
      <li key={index}>
        <button className="btn" onClick={() => whatToDo(index)}>
          {description}
        </button>
      </li>
    );
  });
  // –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  function whatReturn(index) {
    const newMoves = [...moves].map((move, i) => {
      if (i === index && index !== 0) {
        return (
          <button className="btn" key={i}>
            üçÅYou are here!
          </button>
        );
      } else {
        return move;
      }
    });

    return newMoves;
  }
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç–∏—è
  const currentArr = isClicked ? whatReturn(props.currentMove) : moves;
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –Ω–µ—Ç
  const sortValue = props.isSort ? (
    <Sort currentArr={currentArr} ascent={ascent} />
  ) : (
    currentArr
  );
  // –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏—á—å–∏
  function ascent(trueFlase) {
    props.sortState(trueFlase);
  }

  return <div>{sortValue}</div>;
}

export default SwitchSort;
